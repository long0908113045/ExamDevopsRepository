
# Build your Java project and run tests with Gradle using a Gradle wrapper script.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'ContainerRegistry'
  imageRepository: 'pipelineazuredeploy'
  containerRegistry: 'examdevopscontainerregistry.azurecr.io'
  dockerfilePath: 'Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'examdevopscontainerregistry100559ec-auth'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'
  
trigger:
  branches:
    include:
      - main

pr:
  branches:
    include:
      - main


stages:
- stage: RunTests
  displayName: Run All Tests
  jobs:
  - job: RunUnitTests
    displayName: 'Run Unit Tests:'
    strategy:
      matrix:
        frontendTest:
              gradleTask: 'checkStyleFrontend'
              gradleTaskDisplayname: 'frontend'
              preTestCommand: |
                npm --version
                node --version
                npm install
        backendTest:
              gradleTask: 'checkstyleMain checkstyleTest test'
              gradleTaskDisplayname: 'backend'
              preTestCommand: |
                java --version
                which java
      maxParallel: 2
    pool:
      vmImage: $(vmImageName)
    steps:
    - bash: ./gradlew task --build-cache $(preTestCommand)
    - task: Gradle@2
      displayName: Run $(gradleTaskDisplayname) tests
      inputs:
        gradleWrapperFile: 'gradlew'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '17'
        jdkArchitectureOption: 'x64'
        sonarQubeRunAnalysis: true
        sqGradlePluginVersionChoice: 'specify'
        sonarQubeGradlePluginVersion: '2.6.1'
        spotBugsAnalysis: false
        gradleOptions: '-Xmx3072m'
        tasks: $(gradleTask)

# - stage: Build
#   displayName: Build stage
#   dependsOn: RunTests
#   jobs:
#   - job: Build
#     displayName: Build
#     pool:
#       vmImage: $(vmImageName)
#     steps:
#     - bash: ./gradlew task --build-cache | npm install
#     - task: Gradle@2
#       displayName: Build file jar
#       inputs:
#         gradleWrapperFile: 'gradlew'
#         javaHomeOption: 'JDKVersion'
#         jdkVersionOption: '17'
#         jdkArchitectureOption: 'x64'
#         gradleOptions: '-Xmx3072m'
#         tasks: bootJar
#     - task: Docker@2
#       displayName: Build and push an image to container registry
#       inputs:
#         command: buildAndPush
#         repository: $(imageRepository)
#         dockerfile: $(dockerfilePath)
#         containerRegistry: $(dockerRegistryServiceConnection)
#         tags: |
#           $(tag)

#     - upload: manifests
#       artifact: manifests

# - stage: Deploy
#   displayName: Deploy stage
#   dependsOn: Build
#   jobs:
#   - deployment: Deploy
#     displayName: Deploy
#     pool:
#       vmImage: $(vmImageName)
#     environment: 'dev.default'
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - task: KubernetesManifest@0
#             displayName: Create imagePullSecret
#             inputs:
#               action: createSecret
#               secretName: $(imagePullSecret)
#               dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

#           - task: KubernetesManifest@0
#             displayName: Deploy to Kubernetes cluster
#             inputs:
#               action: deploy
#               manifests: |
#                 $(Pipeline.Workspace)/manifests/deployment.yml
#                 $(Pipeline.Workspace)/manifests/service.yml
#               imagePullSecrets: |
#                 $(imagePullSecret)
#               containers: |
#                 $(containerRegistry)/$(imageRepository):$(tag)